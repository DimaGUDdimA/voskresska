// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∞–±–∏—Ä–∏–Ω—Ç"
document.getElementById('generateButton').addEventListener('click', function () {
    const inputText = document.getElementById('inputText').value;
    console.log('–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', inputText); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞

    const maze = generateMaze(30, 30); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ 30x30
    console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∞–±–∏—Ä–∏–Ω—Ç:', maze); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞

    const path = findShortestPath(maze); // –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å
    const mazeWithLetters = placeLetters(maze, inputText, path); // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –±—É–∫–≤
    const mazeWithRandomLetters = addRandomLetters(mazeWithLetters, path); // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    console.log('–õ–∞–±–∏—Ä–∏–Ω—Ç —Å –±—É–∫–≤–∞–º–∏:', mazeWithRandomLetters); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–∫–≤

    renderMaze(mazeWithRandomLetters); // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Depth-First Search (DFS)
function generateMaze(width, height) {
    const maze = Array.from({ length: height }, () => Array(width).fill(1)); // 1 = —Å—Ç–µ–Ω–∞, 0 = –ø—Ä–æ—Ö–æ–¥

    // –î–µ–ª–∞–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä —Å—Ç–µ–Ω–æ–π
    for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
            if (y === 0 || y === height - 1 || x === 0 || x === width - 1) {
                maze[y][x] = 1; // –°—Ç–µ–Ω–∞ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É
            }
        }
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥
    maze[1][0] = 0; // –í—Ö–æ–¥ (–ª–µ–≤–∞—è —Å—Ç–µ–Ω–∞, –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞)
    maze[height - 2][width - 1] = 0; // –í—ã—Ö–æ–¥ (–ø—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞, –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞)

    const stack = [];
    const start = { x: 1, y: 1 }; // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (–≤–Ω—É—Ç—Ä–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞)
    maze[start.y][start.x] = 0; // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
    stack.push(start);

    while (stack.length > 0) {
        const current = stack.pop();
        const neighbors = getNeighbors(current, maze);

        if (neighbors.length > 0) {
            stack.push(current);
            const next = neighbors[Math.floor(Math.random() * neighbors.length)];
            maze[next.y][next.x] = 0; // –ü—Ä–æ—Ö–æ–¥
            maze[(current.y + next.y) / 2][(current.x + next.x) / 2] = 0; // –£–±–∏—Ä–∞–µ–º —Å—Ç–µ–Ω—É –º–µ–∂–¥—É –∫–ª–µ—Ç–∫–∞–º–∏
            stack.push(next);
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Å—Ç–µ–Ω –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    for (let y = 2; y < height - 2; y += 2) {
        for (let x = 2; x < width - 2; x += 2) {
            if (Math.random() < 0.3) { // 30% chance to add a wall
                maze[y][x] = 1;
            }
        }
    }

    return maze;
}

// –ü–æ–∏—Å–∫ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
function getNeighbors(cell, maze) {
    const directions = [
        { x: 0, y: -2 }, // –í–≤–µ—Ä—Ö
        { x: 2, y: 0 },  // –í–ø—Ä–∞–≤–æ
        { x: 0, y: 2 },   // –í–Ω–∏–∑
        { x: -2, y: 0 }   // –í–ª–µ–≤–æ
    ];
    const neighbors = [];

    for (const dir of directions) {
        const x = cell.x + dir.x;
        const y = cell.y + dir.y;

        if (x >= 0 && x < maze[0].length && y >= 0 && y < maze.length && maze[y][x] === 1) {
            neighbors.push({ x, y });
        }
    }

    return neighbors;
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –±—É–∫–≤ –≤–¥–æ–ª—å –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏
function placeLetters(maze, word, path) {
    const letters = word.split('');

    if (path.length < letters.length + 1) { // +1 –¥–ª—è –≤—Ö–æ–¥–∞
        console.error('–ü—É—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –±—É–∫–≤');
        return maze;
    }

    const step = Math.floor((path.length - 1) / letters.length); // –®–∞–≥ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

    for (let i = 0; i < letters.length; i++) {
        const index = i * step + 1; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∫–ª–µ—Ç–∫—É (–≤—Ö–æ–¥)
        const cell = path[index];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏
        if (maze[cell.y][cell.x] === 0) {
            maze[cell.y][cell.x] = letters[i]; // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Ö–æ–¥ –Ω–∞ –±—É–∫–≤—É
        } else {
            console.error('–ë—É–∫–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ');
        }
    }

    return maze;
}

// –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ (BFS)
function findShortestPath(maze) {
    const start = { x: 0, y: 1 }; // –í—Ö–æ–¥ (–ª–µ–≤–∞—è —Å—Ç–µ–Ω–∞, –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞)
    const end = { x: maze[0].length - 1, y: maze.length - 2 }; // –í—ã—Ö–æ–¥ (–ø—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞, –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞)
    const queue = [{ ...start, path: [start] }];
    const visited = new Set();

    while (queue.length > 0) {
        const current = queue.shift();
        const key = `${current.x},${current.y}`;

        if (current.x === end.x && current.y === end.y) {
            return current.path; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å
        }

        if (!visited.has(key)) {
            visited.add(key);

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥—å
            const neighbors = [
                { x: current.x, y: current.y - 1 }, // –í–≤–µ—Ä—Ö
                { x: current.x + 1, y: current.y }, // –í–ø—Ä–∞–≤–æ
                { x: current.x, y: current.y + 1 }, // –í–Ω–∏–∑
                { x: current.x - 1, y: current.y }  // –í–ª–µ–≤–æ
            ];

            for (const neighbor of neighbors) {
                if (
                    neighbor.x >= 0 &&
                    neighbor.x < maze[0].length &&
                    neighbor.y >= 0 &&
                    neighbor.y < maze.length &&
                    maze[neighbor.y][neighbor.x] === 0 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Ö–æ–¥
                ) {
                    queue.push({ ...neighbor, path: [...current.path, neighbor] });
                }
            }
        }
    }

    return []; // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
function addRandomLetters(maze, path) {
    const randomChars = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø0123456789'; // –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    let added = 0;

    while (added < 30) { // –î–æ–±–∞–≤–ª—è–µ–º 30 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const x = Math.floor(Math.random() * maze[0].length);
        const y = Math.floor(Math.random() * maze.length);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—É—Ç–∏ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–µ–Ω–æ–π
        if (maze[y][x] === 0 && !path.some(cell => cell.x === x && cell.y === y)) {
            maze[y][x] = randomChars[Math.floor(Math.random() * randomChars.length)];
            added++;
        }
    }

    return maze;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function renderMaze(maze) {
    const mazeContainer = document.getElementById('maze');
    mazeContainer.innerHTML = '';

    for (let y = 0; y < maze.length; y++) {
        const row = document.createElement('div');
        row.className = 'row';

        for (let x = 0; x < maze[y].length; x++) {
            const cell = document.createElement('div');
            cell.className = 'cell';

            if (maze[y][x] === 1) { // –°—Ç–µ–Ω–∞
                cell.classList.add('wall');
            } else if (typeof maze[y][x] === 'string') { // –ë—É–∫–≤–∞
                cell.classList.add('letter');
                cell.textContent = maze[y][x];
            } else if (x === 0 && y === 1) { // –ù–∞—á–∞–ª–æ –ø—É—Ç–∏ (–≤—Ö–æ–¥)
                cell.classList.add('start');
                cell.textContent = '‚û°Ô∏è'; // –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ
            } else if (x === maze[0].length - 1 && y === maze.length - 2) { // –ö–æ–Ω–µ—Ü –ø—É—Ç–∏ (–≤—ã—Ö–æ–¥)
                cell.classList.add('end');
                cell.textContent = 'üèÅ'; // –ò–∫–æ–Ω–∫–∞ –≤—ã—Ö–æ–¥–∞
            } else { // –ü—Ä–æ—Ö–æ–¥
                cell.classList.add('path');
            }

            row.appendChild(cell);
        }

        mazeContainer.appendChild(row);
    }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
document.getElementById('downloadButton').addEventListener('click', function () {
    const mazeContainer = document.getElementById('maze');

    html2canvas(mazeContainer).then(canvas => {
        const link = document.createElement('a');
        link.href = canvas.toDataURL('image/png');
        link.download = 'maze.png';
        link.click();
    });
});